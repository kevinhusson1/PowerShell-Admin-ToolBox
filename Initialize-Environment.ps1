#Requires -Version 7.5

<#
.SYNOPSIS
    Script de v√©rification des pr√©requis pour PowerShell Admin ToolBox
    
.DESCRIPTION
    V√©rifie que l'environnement dispose de tous les pr√©requis n√©cessaires
    pour ex√©cuter PowerShell Admin ToolBox. Affiche des erreurs uniquement
    en cas de probl√®me d√©tect√©.
    
.PARAMETER ShowDetails
    Affiche des informations d√©taill√©es m√™me en cas de succ√®s
    
.EXAMPLE
    .\Initialize-Environment.ps1
    
.EXAMPLE
    .\Initialize-Environment.ps1 -ShowDetails
    
.NOTES
    Auteur: PowerShell Admin ToolBox Team
    Version: 1.0
    Cr√©ation: 30 Juillet 2025
#>

[CmdletBinding()]
param(
    [Parameter(Mandatory = $false)]
    [switch]$ShowDetails
)

# Variables globales
$ErrorsFound = @()
$WarningsFound = @()

#region Main Execution

try {
    # D√©marrage silencieux sauf en mode ShowDetails
    if ($ShowDetails) {
        Write-Host "üîç V√©rification des pr√©requis PowerShell Admin ToolBox..." -ForegroundColor Cyan
    }
    
    # 1. V√©rification PowerShell 7.5+
    try {
        $currentVersion = $PSVersionTable.PSVersion
        $requiredVersion = [System.Version]"7.5.0"
        
        if ($currentVersion -lt $requiredVersion) {
            $ErrorsFound += "PowerShell version $currentVersion d√©tect√©e. Version 7.5+ requise."
        } else {
            if ($ShowDetails) {
                Write-Host "‚úì PowerShell version $currentVersion valid√©e" -ForegroundColor Green
            }
        }
    }
    catch {
        $ErrorsFound += "Impossible de d√©terminer la version PowerShell : $($_.Exception.Message)"
    }
    
    # 2. V√©rification .NET 9.0
    try {
        $envVersion = [System.Environment]::Version
        
        if ($envVersion.Major -ge 9) {
            if ($ShowDetails) {
                Write-Host "‚úì .NET $($envVersion.Major).$($envVersion.Minor).$($envVersion.Build) d√©tect√©" -ForegroundColor Green
            }
        } else {
            # Test PowerShell Core comme fallback
            $psRuntime = $PSVersionTable.PSEdition
            if ($psRuntime -eq "Core") {
                if ($ShowDetails) {
                    Write-Host "‚úì PowerShell Core d√©tect√© (utilise .NET)" -ForegroundColor Green
                }
            } else {
                $WarningsFound += ".NET 9.0 non d√©tect√© explicitement"
            }
        }
    }
    catch {
        $ErrorsFound += "Erreur lors de la v√©rification .NET : $($_.Exception.Message)"
    }
    
    # 3. V√©rification ExecutionPolicy
    try {
        $currentPolicy = Get-ExecutionPolicy -Scope CurrentUser
        $restrictivePolicies = @('Restricted', 'AllSigned')
        
        if ($currentPolicy -in $restrictivePolicies) {
            $ErrorsFound += "ExecutionPolicy '$currentPolicy' trop restrictive. Politique 'RemoteSigned' ou 'Unrestricted' recommand√©e."
        } else {
            if ($ShowDetails) {
                Write-Host "‚úì ExecutionPolicy '$currentPolicy' autorise l'ex√©cution de scripts" -ForegroundColor Green
            }
        }
    }
    catch {
        $ErrorsFound += "Impossible de v√©rifier l'ExecutionPolicy : $($_.Exception.Message)"
    }
    
    # 4. V√©rification Windows
    try {
        $osInfo = Get-CimInstance -ClassName Win32_OperatingSystem -ErrorAction Stop
        $osVersion = [System.Version]$osInfo.Version
        $osName = $osInfo.Caption
        
        # Windows 10 version 1809 (build 17763) minimum
        $minBuild = 17763
        
        if ($osVersion.Build -lt $minBuild) {
            $ErrorsFound += "Windows build $($osVersion.Build) d√©tect√©. Build $minBuild minimum requis (Windows 10 1809+/Windows Server 2019+)."
        } else {
            if ($ShowDetails) {
                Write-Host "‚úì $osName (Build $($osVersion.Build)) compatible" -ForegroundColor Green
            }
        }
    }
    catch {
        $WarningsFound += "Impossible de v√©rifier la version Windows : $($_.Exception.Message)"
    }
    
    # Affichage des r√©sultats
    $hasErrors = $ErrorsFound.Count -gt 0
    $hasWarnings = $WarningsFound.Count -gt 0
    
    # Affichage uniquement si erreurs ou warnings (ou mode ShowDetails)
    if ($hasErrors -or $hasWarnings -or $ShowDetails) {
        
        if ($hasErrors) {
            Write-Host "`n‚ùå ERREURS D√âTECT√âES :" -ForegroundColor Red
            $ErrorsFound | ForEach-Object {
                Write-Host "   ‚Ä¢ $_" -ForegroundColor Red
            }
        }
        
        if ($hasWarnings) {
            Write-Host "`n‚ö†Ô∏è  AVERTISSEMENTS :" -ForegroundColor Yellow
            $WarningsFound | ForEach-Object {
                Write-Host "   ‚Ä¢ $_" -ForegroundColor Yellow
            }
        }
        
        if ($ShowDetails -and -not $hasErrors -and -not $hasWarnings) {
            Write-Host "`n‚úÖ Tous les pr√©requis sont satisfaits" -ForegroundColor Green
        }
    }
    
    # Exit codes
    if ($hasErrors) {
        Write-Host "`n‚ùå Certains pr√©requis ne sont pas satisfaits." -ForegroundColor Red
        Write-Host "Veuillez corriger les erreurs avant de lancer PowerShell Admin ToolBox." -ForegroundColor Red
        exit 1
    } else {
        exit 0
    }
}
catch {
    Write-Host "‚ùå Erreur critique lors de l'initialisation : $($_.Exception.Message)" -ForegroundColor Red
    exit 2
}

#endregion Main Execution