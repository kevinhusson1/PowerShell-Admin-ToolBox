function Show-StyleShowcase {
    <#
    .SYNOPSIS
        Affiche la vitrine des styles et contrÃ´les ToolBox
    
    .DESCRIPTION
        Module de rÃ©fÃ©rence qui prÃ©sente tous les styles, couleurs, contrÃ´les
        et layouts disponibles dans le systÃ¨me de design ToolBox.
        
        Cette vitrine sert de :
        - RÃ©fÃ©rence visuelle pour les dÃ©veloppeurs
        - Guide de style pour l'Ã©quipe
        - Test des styles en temps rÃ©el
        - Documentation interactive
    
    .EXAMPLE
        Show-StyleShowcase
    #>
    
    [CmdletBinding()]
    param()
    
    try {
        # Logging du dÃ©marrage
        if (Get-Command Write-ToolBoxLog -ErrorAction SilentlyContinue) {
            Write-ToolBoxLog -Level "Info" -Message "Ouverture de la vitrine de styles" -Component "StyleShowcase" -File $true -UI $true
        }
        
        Write-Host "ðŸŽ¨ VITRINE DE STYLES TOOLBOX" -ForegroundColor Magenta
        Write-Host "============================" -ForegroundColor Magenta
        
        # DÃ©termination du chemin XAML
        $scriptPath = $PSScriptRoot
        if (-not $scriptPath) {
            $scriptPath = Split-Path -Parent $MyInvocation.MyCommand.Path
        }
        $xamlPath = Join-Path $scriptPath "StyleShowcase.xaml"
        
        # VÃ©rification de l'existence du fichier XAML
        if (-not (Test-Path $xamlPath)) {
            $errorMsg = "Fichier XAML introuvable : $xamlPath"
            Write-Error $errorMsg
            if (Get-Command Write-ToolBoxLog -ErrorAction SilentlyContinue) {
                Write-ToolBoxLog -Level "Error" -Message $errorMsg -Component "StyleShowcase" -File $true
            }
            return
        }
        
        # Chargement du XAML
        Write-Host "ðŸ“„ Chargement de l'interface XAML..." -ForegroundColor Cyan
        
        Add-Type -AssemblyName PresentationFramework
        Add-Type -AssemblyName PresentationCore
        Add-Type -AssemblyName WindowsBase
        
        [xml]$xaml = Get-Content $xamlPath -Raw
        $reader = New-Object System.Xml.XmlNodeReader $xaml
        $window = [Windows.Markup.XamlReader]::Load($reader)
        
        if (-not $window) {
            throw "Impossible de charger la fenÃªtre XAML"
        }
        
        # RÃ©cupÃ©ration des contrÃ´les nommÃ©s
        $closeButton = $window.FindName("CloseButton")
        $copyXamlButton = $window.FindName("CopyXamlButton")
        $documentationButton = $window.FindName("DocumentationButton")
        
        # Gestion des Ã©vÃ©nements
        if ($closeButton) {
            $closeButton.Add_Click({
                if (Get-Command Write-ToolBoxLog -ErrorAction SilentlyContinue) {
                    Write-ToolBoxLog -Level "Info" -Message "Fermeture de la vitrine de styles" -Component "StyleShowcase" -UI $true
                }
                $window.Close()
            })
        }
        
        if ($copyXamlButton) {
            $copyXamlButton.Add_Click({
                try {
                    # Copie d'un exemple de XAML dans le presse-papiers
                    $exampleXaml = @"
<!-- Exemple d'utilisation des styles ToolBox -->
<Window x:Class="MonModule.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Style="{StaticResource ToolBoxWindow}">
    
    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/PowerShell-Admin-ToolBox;component/Styles/GlobalStyles.xaml" />
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Window.Resources>
    
    <StackPanel Margin="{StaticResource LargeMargin}">
        <TextBlock Text="Mon Interface" Style="{StaticResource HeaderText}"/>
        <TextBox Style="{StaticResource StandardTextBox}" Text="Exemple"/>
        <Button Content="Action" Style="{StaticResource PrimaryButton}"/>
    </StackPanel>
</Window>
"@
                    [System.Windows.Clipboard]::SetText($exampleXaml)
                    
                    # Notification
                    [System.Windows.MessageBox]::Show(
                        "Exemple de XAML copiÃ© dans le presse-papiers !",
                        "ToolBox - Vitrine de Styles",
                        [System.Windows.MessageBoxButton]::OK,
                        [System.Windows.MessageBoxImage]::Information
                    )
                    
                    if (Get-Command Write-ToolBoxLog -ErrorAction SilentlyContinue) {
                        Write-ToolBoxLog -Level "Info" -Message "Exemple XAML copiÃ© dans le presse-papiers" -Component "StyleShowcase" -UI $true
                    }
                }
                catch {
                    [System.Windows.MessageBox]::Show(
                        "Erreur lors de la copie : $($_.Exception.Message)",
                        "Erreur",
                        [System.Windows.MessageBoxButton]::OK,
                        [System.Windows.MessageBoxImage]::Error
                    )
                }
            })
        }
        
        if ($documentationButton) {
            $documentationButton.Add_Click({
                try {
                    # Ouverture de la documentation GitHub
                    $githubUrl = "https://github.com/votre-repo/PowerShell-Admin-ToolBox/wiki/Style-Guide"
                    Start-Process $githubUrl
                    
                    if (Get-Command Write-ToolBoxLog -ErrorAction SilentlyContinue) {
                        Write-ToolBoxLog -Level "Info" -Message "Ouverture de la documentation de styles" -Component "StyleShowcase" -UI $true
                    }
                }
                catch {
                    [System.Windows.MessageBox]::Show(
                        "Impossible d'ouvrir la documentation : $($_.Exception.Message)",
                        "Erreur",
                        [System.Windows.MessageBoxButton]::OK,
                        [System.Windows.MessageBoxImage]::Warning
                    )
                }
            })
        }
        
        # Affichage d'informations sur la console
        Write-Host "âœ… Interface chargÃ©e avec succÃ¨s" -ForegroundColor Green
        Write-Host "ðŸ“Š FonctionnalitÃ©s disponibles :" -ForegroundColor Yellow
        Write-Host "   â€¢ Couleurs systÃ¨me et personnalisÃ©es" -ForegroundColor White
        Write-Host "   â€¢ Styles de typographie" -ForegroundColor White
        Write-Host "   â€¢ Boutons et contrÃ´les de formulaire" -ForegroundColor White
        Write-Host "   â€¢ Copie d'exemples XAML" -ForegroundColor White
        Write-Host "   â€¢ Lien vers documentation" -ForegroundColor White
        
        # Gestion de la fermeture propre
        $window.Add_Closed({
            if (Get-Command Write-ToolBoxLog -ErrorAction SilentlyContinue) {
                Write-ToolBoxLog -Level "Info" -Message "Vitrine de styles fermÃ©e" -Component "StyleShowcase" -File $true -UI $true
            }
            Write-Host "ðŸŽ¨ Vitrine de styles fermÃ©e" -ForegroundColor Magenta
        })
        
        # Affichage de la fenÃªtre
        Write-Host "ðŸš€ Ouverture de la vitrine..." -ForegroundColor Green
        $window.ShowDialog() | Out-Null
        
    }
    catch {
        $errorMsg = "Erreur lors de l'affichage de la vitrine de styles : $($_.Exception.Message)"
        Write-Error $errorMsg
        
        if (Get-Command Write-ToolBoxLog -ErrorAction SilentlyContinue) {
            Write-ToolBoxLog -Level "Error" -Message $errorMsg -Component "StyleShowcase" -File $true
        }
        
        # Affichage d'informations de dÃ©pannage
        Write-Host "`nðŸ”§ INFORMATIONS DE DÃ‰PANNAGE :" -ForegroundColor Red
        Write-Host "   â€¢ VÃ©rifiez que .NET 9 est installÃ©" -ForegroundColor Yellow
        Write-Host "   â€¢ VÃ©rifiez que PowerShell 7.5+ est utilisÃ©" -ForegroundColor Yellow
        Write-Host "   â€¢ Le fichier XAML doit Ãªtre prÃ©sent : $xamlPath" -ForegroundColor Yellow
        Write-Host "   â€¢ Les styles globaux doivent Ãªtre accessibles" -ForegroundColor Yellow
        
        # Informations de versions
        Write-Host "`nðŸ“‹ INFORMATIONS SYSTÃˆME :" -ForegroundColor Cyan
        Write-Host "   â€¢ PowerShell : $($PSVersionTable.PSVersion)" -ForegroundColor White
        Write-Host "   â€¢ OS : $($PSVersionTable.OS)" -ForegroundColor White
        Write-Host "   â€¢ Edition : $($PSVersionTable.PSEdition)" -ForegroundColor White
    }
}
Show-StyleShowcase