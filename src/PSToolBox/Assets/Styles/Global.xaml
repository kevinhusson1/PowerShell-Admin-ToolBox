<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <!-- =============================================================== -->
    <!-- PALETTE DE COULEURS CENTRALE DE L'APPLICATION                     -->
    <!-- =============================================================== -->
    <SolidColorBrush x:Key="Primary.Brush" Color="#3B82F6"/>
    <SolidColorBrush x:Key="Primary.Hover.Brush" Color="#2563EB"/>
    <SolidColorBrush x:Key="Neutral.Text.Dark" Color="#1F2937"/>
    <SolidColorBrush x:Key="Neutral.Text.Normal" Color="#374151"/>
    <SolidColorBrush x:Key="Neutral.Text.Light" Color="#6B7280"/>
    <SolidColorBrush x:Key="Neutral.Border.Normal" Color="#D1D5DB"/>
    <SolidColorBrush x:Key="Neutral.Border.Light" Color="#E5E7EB"/>
    <SolidColorBrush x:Key="Neutral.Background.Window" Color="#F9FAFB"/>
    <SolidColorBrush x:Key="Neutral.Background.Header" Color="#F8F9FA"/>
    <SolidColorBrush x:Key="Neutral.Background.RowAlternate" Color="#117be6ff"/> 
    <SolidColorBrush x:Key="Neutral.Background.Hover" Color="#F1F5F9"/>
    <SolidColorBrush x:Key="Neutral.Background.Selected" Color="#EFF6FF"/>
    <SolidColorBrush x:Key="Status.Green.Brush" Color="#10B981"/>
    <SolidColorBrush x:Key="Status.Green.Hover.Brush" Color="#059669"/>
    <SolidColorBrush x:Key="Status.Red.Brush" Color="#EF4444"/>
    <SolidColorBrush x:Key="Status.Red.Hover.Brush" Color="#DC2626"/>
    <FontFamily x:Key="UIFont">Segoe UI</FontFamily>

    <!-- STYLES DE TEXTE -->
    <Style TargetType="TextBlock" x:Key="H1Style"><Setter Property="FontSize" Value="24"/><Setter Property="FontWeight" Value="Bold"/><Setter Property="Foreground" Value="{DynamicResource Neutral.Text.Dark}"/></Style>
    <Style TargetType="TextBlock" x:Key="H2Style"><Setter Property="FontSize" Value="14"/><Setter Property="FontWeight" Value="Normal"/><Setter Property="Foreground" Value="{DynamicResource Neutral.Text.Light}"/></Style>
    <Style TargetType="TextBlock" x:Key="H4Style"><Setter Property="FontSize" Value="14"/><Setter Property="FontWeight" Value="SemiBold"/><Setter Property="Foreground" Value="{DynamicResource Neutral.Text.Dark}"/></Style>
    <Style TargetType="GroupBox" x:Key="SectionGroupBoxStyle"><Setter Property="Padding" Value="15"/><Setter Property="Margin" Value="0,0,0,15"/><Setter Property="BorderBrush" Value="{DynamicResource Neutral.Border.Light}"/><Setter Property="BorderThickness" Value="1"/><Setter Property="Template"><Setter.Value><ControlTemplate TargetType="GroupBox"><Grid><Grid.RowDefinitions><RowDefinition Height="Auto"/><RowDefinition Height="*"/></Grid.RowDefinitions><Border Grid.Row="0" Background="White" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0,0,0,1" Padding="10,8"><ContentPresenter ContentSource="Header" RecognizesAccessKey="True" /></Border><Border Grid.Row="1" Background="White" Padding="{TemplateBinding Padding}"><ContentPresenter/></Border></Grid></ControlTemplate></Setter.Value></Setter></Style>
    <Style TargetType="TextBlock" x:Key="GroupBoxHeaderTextStyle" BasedOn="{StaticResource H4Style}"><Setter Property="Foreground" Value="{DynamicResource Primary.Brush}"/></Style>
    
    <!-- STYLES DE BOUTONS -->
    <Style TargetType="Button" x:Key="BaseButtonStyle"><Setter Property="Height" Value="36"/><Setter Property="Padding" Value="20,8"/><Setter Property="BorderThickness" Value="0"/><Setter Property="Cursor" Value="Hand"/><Setter Property="Template"><Setter.Value><ControlTemplate TargetType="Button"><Border Background="{TemplateBinding Background}" CornerRadius="4"><ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" Margin="{TemplateBinding Padding}"/></Border></ControlTemplate></Setter.Value></Setter></Style>
    <Style TargetType="Button" x:Key="PrimaryButtonStyle" BasedOn="{StaticResource BaseButtonStyle}"><Setter Property="Background" Value="{DynamicResource Primary.Brush}"/><Setter Property="Foreground" Value="White"/><Setter Property="FontWeight" Value="SemiBold"/><Style.Triggers><Trigger Property="IsMouseOver" Value="True"><Setter Property="Background" Value="{DynamicResource Primary.Hover.Brush}"/></Trigger><Trigger Property="IsEnabled" Value="False"><Setter Property="Background" Value="{DynamicResource Neutral.Text.Light}"/><Setter Property="Opacity" Value="0.7"/></Trigger></Style.Triggers></Style>
    <Style TargetType="Button" x:Key="SecondaryButtonStyle" BasedOn="{StaticResource BaseButtonStyle}"><Setter Property="Background" Value="White"/><Setter Property="Foreground" Value="{DynamicResource Neutral.Text.Dark}"/><Setter Property="BorderThickness" Value="1"/><Setter Property="BorderBrush" Value="{DynamicResource Neutral.Border.Normal}"/><Style.Triggers><Trigger Property="IsMouseOver" Value="True"><Setter Property="Background" Value="{DynamicResource Neutral.Background.Hover}"/></Trigger><Trigger Property="IsEnabled" Value="False"><Setter Property="Background" Value="{DynamicResource Neutral.Border.Light}"/><Setter Property="Foreground" Value="{DynamicResource Neutral.Text.Light}"/><Setter Property="Opacity" Value="0.7"/></Trigger></Style.Triggers></Style>
    <Style TargetType="Button" x:Key="GreenButtonStyle" BasedOn="{StaticResource PrimaryButtonStyle}"><Setter Property="Background" Value="{DynamicResource Status.Green.Brush}"/><Style.Triggers><Trigger Property="IsMouseOver" Value="True"><Setter Property="Background" Value="{DynamicResource Status.Green.Hover.Brush}"/></Trigger></Style.Triggers></Style>
    <Style TargetType="Button" x:Key="RedButtonStyle" BasedOn="{StaticResource PrimaryButtonStyle}"><Setter Property="Background" Value="{DynamicResource Status.Red.Brush}"/><Style.Triggers><Trigger Property="IsMouseOver" Value="True"><Setter Property="Background" Value="{DynamicResource Status.Red.Hover.Brush}"/></Trigger></Style.Triggers></Style>

    <!-- STYLES DE CONTRÃ”LES DE SAISIE -->
    <Style TargetType="TextBox" x:Key="StandardTextBoxStyle"><Setter Property="Height" Value="36"/><Setter Property="Padding" Value="10,5"/><Setter Property="BorderBrush" Value="{DynamicResource Neutral.Border.Normal}"/><Setter Property="BorderThickness" Value="1"/><Setter Property="VerticalContentAlignment" Value="Center"/><Style.Triggers><Trigger Property="IsMouseOver" Value="True"><Setter Property="BorderBrush" Value="{DynamicResource Primary.Brush}"/></Trigger><Trigger Property="IsFocused" Value="True"><Setter Property="BorderBrush" Value="{DynamicResource Primary.Brush}"/></Trigger></Style.Triggers></Style>
    <Style TargetType="PasswordBox" x:Key="StandardPasswordBoxStyle"><Setter Property="Height" Value="36"/><Setter Property="Padding" Value="10,5"/><Setter Property="BorderBrush" Value="{DynamicResource Neutral.Border.Normal}"/><Setter Property="BorderThickness" Value="1"/><Setter Property="VerticalContentAlignment" Value="Center"/><Style.Triggers><Trigger Property="IsMouseOver" Value="True"><Setter Property="BorderBrush" Value="{DynamicResource Primary.Brush}"/></Trigger><Trigger Property="IsFocused" Value="True"><Setter Property="BorderBrush" Value="{DynamicResource Primary.Brush}"/></Trigger></Style.Triggers></Style>
    <Style TargetType="ComboBox" x:Key="StandardComboBoxStyle"><Setter Property="Height" Value="36"/><Setter Property="Padding" Value="10,5"/><Setter Property="BorderBrush" Value="{DynamicResource Neutral.Border.Normal}"/><Setter Property="BorderThickness" Value="1"/><Setter Property="VerticalContentAlignment" Value="Center"/><Style.Triggers><Trigger Property="IsMouseOver" Value="True"><Setter Property="BorderBrush" Value="{DynamicResource Primary.Brush}"/></Trigger></Style.Triggers></Style>
    <Style TargetType="ComboBoxItem" x:Key="StandardComboBoxItemStyle"><Setter Property="Padding" Value="10,8"/><Style.Triggers><Trigger Property="IsMouseOver" Value="True"><Setter Property="Background" Value="{DynamicResource Neutral.Background.Hover}"/></Trigger><Trigger Property="IsSelected" Value="True"><Setter Property="Background" Value="{DynamicResource Neutral.Background.Selected}"/><Setter Property="Foreground" Value="{DynamicResource Primary.Brush}"/></Trigger></Style.Triggers></Style>
    <Style TargetType="CheckBox" x:Key="StandardCheckBoxStyle"><Setter Property="VerticalAlignment" Value="Center"/><Setter Property="Template"><Setter.Value><ControlTemplate TargetType="CheckBox"><StackPanel Orientation="Horizontal"><Border x:Name="CheckBoxBorder" BorderBrush="{DynamicResource Neutral.Border.Normal}" BorderThickness="1" Background="Transparent" Width="16" Height="16" CornerRadius="4"><Path x:Name="CheckMark" Stroke="White" StrokeThickness="2" Visibility="Collapsed" Data="M4,8 L7,11 L12,5" Stretch="Uniform"/></Border><ContentPresenter Margin="8,0,0,0" VerticalAlignment="Center"/></StackPanel><ControlTemplate.Triggers><Trigger Property="IsChecked" Value="True"><Setter TargetName="CheckMark" Property="Visibility" Value="Visible"/><Setter TargetName="CheckBoxBorder" Property="Background" Value="{DynamicResource Primary.Brush}"/><Setter TargetName="CheckBoxBorder" Property="BorderBrush" Value="{DynamicResource Primary.Brush}"/></Trigger><Trigger Property="IsMouseOver" Value="True"><Setter TargetName="CheckBoxBorder" Property="BorderBrush" Value="{DynamicResource Primary.Brush}"/></Trigger></ControlTemplate.Triggers></ControlTemplate></Setter.Value></Setter></Style>
    <Style TargetType="RadioButton" x:Key="StandardRadioButtonStyle"><Setter Property="VerticalAlignment" Value="Center"/><Setter Property="Template"><Setter.Value><ControlTemplate TargetType="RadioButton"><StackPanel Orientation="Horizontal"><Border x:Name="RadioButtonBorder" BorderBrush="{DynamicResource Neutral.Border.Normal}" BorderThickness="1" Background="White" Width="16" Height="16" CornerRadius="8"><Ellipse x:Name="RadioButtonMark" Fill="{DynamicResource Primary.Brush}" Width="8" Height="8" Visibility="Collapsed"/></Border><ContentPresenter Margin="8,0,0,0" VerticalAlignment="Center"/></StackPanel><ControlTemplate.Triggers><Trigger Property="IsChecked" Value="True"><Setter TargetName="RadioButtonMark" Property="Visibility" Value="Visible"/><Setter TargetName="RadioButtonBorder" Property="BorderBrush" Value="{DynamicResource Primary.Brush}"/></Trigger><Trigger Property="IsMouseOver" Value="True"><Setter TargetName="RadioButtonBorder" Property="BorderBrush" Value="{DynamicResource Primary.Brush}"/></Trigger></ControlTemplate.Triggers></ControlTemplate></Setter.Value></Setter></Style>

    <!-- Style principal du DataGrid - CORRIGÃ‰ -->
    <Style TargetType="DataGrid" x:Key="StandardDataGridStyle">
        <Setter Property="Background" Value="White"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Neutral.Border.Light}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="RowHeight" Value="48"/>
        <!-- IMPORTANT : DÃ©sactiver les lignes de grille pour Ã©viter les conflits -->
        <Setter Property="GridLinesVisibility" Value="None"/>
        <Setter Property="HorizontalGridLinesBrush" Value="Transparent"/>
        <Setter Property="HeadersVisibility" Value="Column"/>
        <Setter Property="AutoGenerateColumns" Value="False"/>
        <Setter Property="CanUserAddRows" Value="False"/>
        <Setter Property="CanUserDeleteRows" Value="False"/>
        <Setter Property="IsReadOnly" Value="True"/>
        <Setter Property="AlternationCount" Value="2"/>
    </Style>

    <Style TargetType="DataGridColumnHeader" x:Key="StandardDataGridColumnHeaderStyle">
        <Setter Property="Background" Value="{DynamicResource Neutral.Background.Header}"/>
        <Setter Property="Foreground" Value="{DynamicResource Neutral.Text.Normal}"/>
        <Setter Property="FontWeight" Value="Medium"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Padding" Value="16,12"/>
        <Setter Property="BorderThickness" Value="0,0,1,1"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Neutral.Border.Light}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource Neutral.Background.Hover}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Style des lignes - ORDRE DES TRIGGERS CORRIGÃ‰ -->
    <Style TargetType="DataGridRow" x:Key="StandardDataGridRowStyle">
        <!-- Background initial transparent pour les lignes paires (index 0) -->
        <Setter Property="Background" Value="White"/>
        <Setter Property="Foreground" Value="{DynamicResource Neutral.Text.Dark}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="DataGridRow">
                    <Grid>
                        <Border x:Name="DGR_Border" 
                                BorderThickness="0,0,0,1" 
                                BorderBrush="{DynamicResource Neutral.Border.Light}" 
                                Background="{TemplateBinding Background}" 
                                SnapsToDevicePixels="True" 
                                MinHeight="48">
                            <SelectiveScrollingGrid>
                                <SelectiveScrollingGrid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                </SelectiveScrollingGrid.ColumnDefinitions>
                                <SelectiveScrollingGrid.RowDefinitions>
                                    <RowDefinition Height="*"/>
                                </SelectiveScrollingGrid.RowDefinitions>
                                <DataGridCellsPresenter Grid.Column="0" 
                                                    ItemsPanel="{TemplateBinding ItemsPanel}" 
                                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                                    VerticalAlignment="Stretch"/>
                            </SelectiveScrollingGrid>
                        </Border>
                        <Border x:Name="SelectionIndicator" 
                                Width="3" 
                                Background="{DynamicResource Primary.Brush}" 
                                HorizontalAlignment="Left" 
                                Visibility="Collapsed"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!-- IMPORTANT : L'alternance doit Ãªtre le premier trigger pour avoir la prioritÃ© la plus faible -->
                        <Trigger Property="AlternationIndex" Value="1">
                            <Setter TargetName="DGR_Border" Property="Background" Value="{DynamicResource Neutral.Background.RowAlternate}"/>
                        </Trigger>
                        <!-- Le hover a une prioritÃ© plus Ã©levÃ©e -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="DGR_Border" Property="Background" Value="{DynamicResource Neutral.Background.Hover}"/>
                        </Trigger>
                        <!-- La sÃ©lection a la prioritÃ© la plus Ã©levÃ©e -->
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="DGR_Border" Property="Background" Value="{DynamicResource Neutral.Background.Selected}"/>
                            <Setter TargetName="SelectionIndicator" Property="Visibility" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="DataGridCell">
        <Setter Property="Padding" Value="16,10"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="FontSize" Value="13"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="DataGridCell">
                    <Border Background="{TemplateBinding Background}" 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            Padding="{TemplateBinding Padding}" 
                            SnapsToDevicePixels="True">
                        <ContentPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource Primary.Brush}"/>
                <Setter Property="FontWeight" Value="SemiBold"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!-- NOUVEAU : ComboBox Ã©ditable pour le filtrage -->
    <Style TargetType="ComboBox" x:Key="EditableComboBoxStyle" BasedOn="{StaticResource StandardComboBoxStyle}">
        <Setter Property="IsEditable" Value="True"/>
        <Setter Property="IsTextSearchEnabled" Value="False"/> <!-- On gÃ©rera le filtrage en code, pas en XAML -->
        <Setter Property="StaysOpenOnEdit" Value="True"/>
    </Style>
    <!-- NOUVEAU : RichTextBox pour l'affichage des logs -->
    <Style TargetType="RichTextBox" x:Key="LogRichTextBoxStyle">
        <Setter Property="Background" Value="White"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Neutral.Border.Normal}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="10"/>
        <Setter Property="FontFamily" Value="Consolas, Courier New, monospace"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Foreground" Value="{DynamicResource Neutral.Text.Normal}"/>
        <Setter Property="IsReadOnly" Value="True"/>
        <Setter Property="VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="AcceptsReturn" Value="True"/>
    </Style>
    <!-- =============================================================== -->
    <!-- STYLES POUR LES INDICATEURS                                       -->
    <!-- =============================================================== -->
    <!-- STYLES POUR LES INDICATEURS -->
    <Style TargetType="ProgressBar" x:Key="DiscreteProgressBarStyle"><Setter Property="Height" Value="8"/><Setter Property="Background" Value="{DynamicResource Neutral.Border.Light}"/><Setter Property="Foreground" Value="{DynamicResource Primary.Brush}"/><Setter Property="BorderThickness" Value="0"/></Style>

<!-- STYLES POUR LES VUES COMPLEXES                                    -->
    <!-- =============================================================== -->
    <!-- Style du TreeView principal -->
    <Style TargetType="TreeView" x:Key="StandardTreeViewStyle">
        <Setter Property="Background" Value="White"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Neutral.Border.Normal}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="5"/>
    </Style>

    <!-- CORRECTION : Ce style doit Ãªtre dÃ©fini AVANT le style TreeViewItem qui l'utilise -->
    <!-- Style interne pour le bouton d'expansion du TreeView -->
    <Style x:Key="ExpandCollapseToggleStyle" TargetType="ToggleButton">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Width" Value="16"/>
        <Setter Property="Height" Value="16"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border Width="16" Height="16" Background="Transparent">
                        <Path x:Name="arrow" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{DynamicResource Neutral.Text.Light}" Data="M 0,0 L 4,4 L 0,8 Z" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="arrow" Property="Data" Value="M 0,4 L 8,4 L 4,0 Z" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Style de chaque Ã©lÃ©ment dans le TreeView (maintenant dÃ©fini APRÃˆS sa dÃ©pendance) -->
    <Style TargetType="TreeViewItem" x:Key="StandardTreeViewItemStyle">
        <Setter Property="Padding" Value="5,3"/>
        <Setter Property="Foreground" Value="{DynamicResource Neutral.Text.Dark}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TreeViewItem">
                    <StackPanel>
                        <Border x:Name="Bd" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" BorderBrush="Transparent" BorderThickness="1" CornerRadius="3">
                            <StackPanel Orientation="Horizontal">
                                <ToggleButton x:Name="Expander" Style="{StaticResource ExpandCollapseToggleStyle}" IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press"/>
                                <ContentPresenter x:Name="PART_Header" ContentSource="Header" HorizontalAlignment="Left" VerticalAlignment="Center" />
                            </StackPanel>
                        </Border>
                        <ItemsPresenter x:Name="ItemsHost" Visibility="Collapsed" Margin="20,0,0,0" />
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True"><Setter TargetName="ItemsHost" Property="Visibility" Value="Visible"/></Trigger>
                        <Trigger Property="HasItems" Value="False"><Setter TargetName="Expander" Property="Visibility" Value="Hidden"/></Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource Neutral.Background.Selected}" />
                            <Setter Property="Foreground" Value="{DynamicResource Primary.Brush}"/>
                        </Trigger>
                        <Trigger SourceName="Bd" Property="IsMouseOver" Value="True">
                             <Setter TargetName="Bd" Property="Background" Value="{DynamicResource Neutral.Background.Hover}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>